------- FILE C:\Users\jefma\Desktop\ThinRedLine\a.asm LEVEL 1 PASS 1
      1  0000 ????						; thin red line by Kirk Israel
      2  0000 ????
      3  0000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 1
      0  0000 ????				      include	vcs.h
      1  0000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  0000 ????
      3  0000 ????						; VCS.H
      4  0000 ????						; Version 1.05, 13/November/2003
      5  0000 ????
      6  0000 ????	       00 69	   VERSION_VCS =	105
      7  0000 ????
      8  0000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  0000 ????						;
     12  0000 ????						; This file defines hardware registers and memory mapping for the
     13  0000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  0000 ????						; available at at http://www.atari2600.org/dasm
     16  0000 ????						;
     17  0000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  0000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  0000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  0000 ????						; with your views.  Please contribute, if you think you can improve this
     21  0000 ????						; file!
     22  0000 ????						;
     23  0000 ????						; Latest Revisions...
     24  0000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  0000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  0000 ????						;			    This will allow conditional code to verify VCS.H being
     27  0000 ????						;			    used for code assembly.
     28  0000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  0000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  0000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  0000 ????						;			 readability issue, and binary compatibility with disassembled
     32  0000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  0000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  0000 ????						;			 which was broken by the use of segments in this file, as
     35  0000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  0000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  0000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  0000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  0000 ????						;						   it is safe to leave it undefined, and the base address will
     40  0000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  0000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  0000 ????						;			  - register definitions are now generated through assignment
     43  0000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  0000 ????						;			    address architecture.
     45  0000 ????						; 1.0	22/MAR/2003		Initial release
     46  0000 ????
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????
     50  0000 ????						; TIA_BASE_ADDRESS
     51  0000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  0000 ????						; Normally 0, the base address should (externally, before including this file)
     53  0000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  0000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  0000 ????						; < $40 as a bankswitch.
     56  0000 ????
     57  0000 ????				      IFNCONST	TIA_BASE_ADDRESS
     58  0000 ????	       00 00	   TIA_BASE_ADDRESS =	0
     59  0000 ????				      ENDIF
     60  0000 ????
     61  0000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  0000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  0000 ????						; *OR* by declaring the label before including this file, eg:
     64  0000 ????						; TIA_BASE_ADDRESS = $40
     65  0000 ????						;   include "vcs.h"
     66  0000 ????
     67  0000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  0000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  0000 ????						; for the mirrored ROM hardware registers.
     70  0000 ????
     71  0000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  0000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  0000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  0000 ????
     75  0000 ????				      IFNCONST	TIA_BASE_READ_ADDRESS
     76  0000 ????	       00 00	   TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  0000 ????				      ENDIF
     78  0000 ????
     79  0000 ????				      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  0000 ????	       00 00	   TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  0000 ????				      ENDIF
     82  0000 ????
     83  0000 ????						;-------------------------------------------------------------------------------
     84  0000 ????
     85 U0000 ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U0000 ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0000 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  0000 ????				      SEG
    201  0000 ????
    202  0000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\ThinRedLine\a.asm
      5  f000					      org	$F000
      6  f000				   Start
      7  f000		       78		      SEI
      8  f001		       d8		      CLD
      9  f002		       a2 ff		      LDX	#$FF
     10  f004		       9a		      TXS
     11  f005		       a9 00		      LDA	#0
     12  f007				   ClearMem
     13  f007		       95 00		      STA	0,X
     14  f009		       ca		      DEX
     15  f00a		       d0 fb		      BNE	ClearMem
     16  f00c		       a9 9a		      LDA	#$9A
     17  f00e		       85 09		      STA	COLUBK
     18  f010		       a9 32		      LDA	#50
     19  f012		       85 06		      STA	COLUP0
     20  f014				   MainLoop
     21  f014		       a9 02		      LDA	#2
     22  f016		       85 00		      STA	VSYNC
     23  f018		       85 02		      STA	WSYNC
     24  f01a		       85 02		      STA	WSYNC
     25  f01c		       85 02		      STA	WSYNC
     26  f01e		       a9 2b		      LDA	#43
     27  f020		       8d 96 02 	      STA	TIM64T
     28  f023		       a9 00		      LDA	#0
     29  f025		       85 00		      STA	VSYNC
     30  f027
     31  f027				   WaitForVblankEnd
     32  f027		       ad 84 02 	      LDA	INTIM
     33  f02a		       d0 fb		      BNE	WaitForVblankEnd
     34  f02c		       a0 bf		      LDY	#191
     35  f02e
     36  f02e		       85 02		      STA	WSYNC
     37  f030		       85 01		      STA	VBLANK
     38  f032							;LDA #$F0	
     39  f032		       85 22		      STA	HMM0
     40  f034
     41  f034		       85 02		      STA	WSYNC
     42  f036		       85 2a		      STA	HMOVE
     43  f038
     44  f038		       a9 02		      LDA	#2
     45  f03a				   ScanLoop
     46  f03a		       85 02		      STA	WSYNC
     47  f03c		       85 2a		      STA	HMOVE
     48  f03e		       85 2a		      STA	HMOVE
     49  f040		       e5 01		      SBC	1
     50  f042		       85 1d		      STA	ENAM0
     51  f044		       85 22		      STA	HMM0
     52  f046
     53  f046		       88		      DEY
     54  f047		       d0 f1		      BNE	ScanLoop
     55  f049
     56  f049		       a9 02		      LDA	#2
     57  f04b		       85 02		      STA	WSYNC
     58  f04d		       85 01		      STA	VBLANK
     59  f04f		       a2 1e		      LDX	#30
     60  f051				   OverScanWait
     61  f051		       85 02		      STA	WSYNC
     62  f053		       ca		      DEX
     63  f054		       d0 fb		      BNE	OverScanWait
     64  f056		       4c 14 f0 	      JMP	MainLoop
     65  f059
     66  fffc					      org	$FFFC
     67  fffc		       00 f0		      .word.w	Start
     68  fffe		       00 f0		      .word.w	Start
     69  10000
